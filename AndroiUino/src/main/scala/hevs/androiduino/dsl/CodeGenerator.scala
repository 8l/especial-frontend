package hevs.androiduino.dsl

import grizzled.slf4j.Logging
import hevs.androiduino.dsl.components.fundamentals.ComponentManager
import java.io.PrintWriter
import scala.sys.process._
import hevs.androiduino.dsl.utils.Version
import hevs.androiduino.dsl.utils.OSUtils
import hevs.androiduino.dsl.utils.OSUtils._

object CodeGenerator extends Logging {

  def checkWarnings(): Boolean = {
    val c = ComponentManager.findUnconnectedComponents
    if(c.size > 0) {
      println("WARN: Unconnected component(s) found:")
      println("\t- " + c.mkString("\n\t- "))
      return true
    }
    false // No warnings
  }

  def generateCode(): String = {

    checkWarnings()

    val result =
      preamble() +
        ComponentManager.generateConstantsCode +
        ComponentManager.generateFunctionsCode +
        preInit() + "\n" +
        ComponentManager.generateInitCode +
        postInit() + "\n" +
        beginMain() + "\n" +
        ComponentManager.generateBeginMainCode + "\n" +
        startLoopMain() + "\n" +
        ComponentManager.generateLoopingCode +
        postMain() + "\n"

    result
  }

  def preamble() = {
    val ver = Version.getVersion
    "/*" + "\n" +
      " " + "*".*(60) + "\n" +
      s" Generated by AndroidUINO generator / mui 2013" + "\n" +
      s" Version $ver" + "\n" +
      " " + "*".*(60) + "\n" +
      " */\n\n"
  }

  def preInit() = {
    "void init(){"
  }

  def postInit() = {
    "}\n\n"
  }

  def beginMain() = {
    "int main(){\n\t"
  }

  def startLoopMain() = {
    "\twhile(1){"
  }

  def postMain() = {
    "}}"
  }

  def outputToFile(fileName: String, code: String) = {
    val writer = new PrintWriter(fileName)
    writer.print(code)
    writer.close()

    OSUtils.getOsType match {
      case _: Windows => {
        // Call the AStyle conversion program on windows
        s"./lib/AStyle.exe --style=kr -Y $fileName".!!
      }
      case _: Linux => {
        s"./lib/astyle --style=kr -Y $fileName".!!
      }
      case _ => error("OS not supported. Cannot run `astyle`.")
    }
  }
}